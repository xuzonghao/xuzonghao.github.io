---
layout: post
title:  "php16、17章"
date:   2016-04-11
categories: php
---


# 第十六章 邮件处理

### SMTP功能配置

```
**默认的SMTP配置是写在PHP配置文件php.ini**

[mail function]
; For Win32 only.
; http://php.net/smtp
SMTP = localhost
; http://php.net/smtp-port
smtp_port = 25

; For Win32 only.
; http://php.net/sendmail-from
;sendmail_from = me@example.com

; For Unix only.  You may supply arguments as well (default: "sendmail -t -i").
; http://php.net/sendmail-path
;sendmail_path =

; Force the addition of the specified parameters to be passed as extra parameters
; to the sendmail binary. These parameters will always replace the value of
; the 5th parameter to mail(), even in safe mode.
;mail.force_extra_parameters =

; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename
mail.add_x_header = On

; The path to a log file that will log all mail() calls. Log entries include
; the full path of the script, line number, To address and headers.
;mail.log =
```


### 安装SMTP服务器


## 使用mail函数发送邮件

### mail函数简介

```
bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )
to电子邮件收件人或收件人列表
subject为邮件主题
message为要发送的消息（每行直接必须以一个LF(\n)进行分隔，且每行不能超过70个字符）
additional_headers为附加邮件头信息，它将被放在邮件头信息的尾部，常用的附加头信息有From、cc、Bcc
additional_parameters为SMTP服务程序的其他配置选项，函数只有在成功发送邮件时才会返回布尔值true，其他时候返回false，该函数为可选项。


本字符串的格式必须符合 RFC 2822。例如：

user@example.com
user@example.com, anotheruser@example.com
User <user@example.com>
User <user@example.com>, Another User <anotheruser@example.com>
```

```
MIME-Version: 1.0
Content-Type: text/html; charset=gb2312
To: xx <xx@example.com>, yy <yy@example.com>
From: zz <zz@example.com>
Cc: aa <aa@example.com>
Bcc: bb <bb.example.com>
```

```
**mail函数发送一封简单的邮件**
<?php
$to = "zonghao1@staff.sina.com.cn";
$message = "this is test message.";
$subject = "testing";
$from = "From: xuhao@163.com";
$sendmail = mail($to, $subject, $message, $from);
if($sendmail){
	echo "sent succ.";
}else{
	echo "sent fail.";
}
?>
```

###　发送HTML格式邮件

```
**发送精彩内容给用户，指定MIME类型指定为html**
<?php
$to = "zonghao1@staff.sina.com.cn";
$subject = "HTMl testing.";
$message = "

<html>
<head>
	<title>html testing.</title>
</head>
<body align='center'>
	<h1 style='color:red;'>HTML testing.</h1>
	<p style='color:blue;'>this is test message.</p>
</body>
</html>";

$header = "MIME-Version: 1.0\r\n";
$header .= "Content-Type: text/html; charset=utf-8\r\n";
$header .= "From: xuhao@163.com\r\n";
$header .= "Cc: zonghao1@staff.sina.com.cn\r\n";

$sendmail = mail($to,$subject,$message,$header);
if($sendmail){
	echo "sent succ.";
}else{
	echo "sent fail.";
}
?>
```

### 发送带附件的邮件

```
**需要在头信息中指定一个MIME类型分界线，然后在邮件主体声明MIME类型**
$header = "Content-type:  multipart/mixed; boundary= md5(time())";
boundary为分界线，他为一串无规则的字符串。定义分界符时候，MIME类型需要被指定为multipart/mixed

**直接输入收件人地址、发件人地址等信息以及从本地上传文件并进行发送**
//16.3.php
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
	<title>发送带附件的邮件</title>
</head>
<body>
	<form method="POST" name="form1" action="16.4.php" enctype="multipart/form-data">
		<table>
			<tr><td>发件人地址:</td>
				<td><input type=text name="from" value=""></td>
			</tr>
			<tr><td>收件人地址:</td>
				<td><input type=text name="to" value=""></td>
			</tr>
			<tr><td>邮件主题:</td>
				<td><input type=text name="subject" value=""></td>
			</tr>
			<tr><td>邮件内容:</td>
				<td><textarea name="body"></textarea></td>
			</tr>
			<tr><td>附件:</td>
				<td><input type=file name="upload_file"></td>
			</tr>
			<tr><td> </td>
				<td><input type=submit value="确定"><input type="reset" value="重置"></td>
			</tr>
		</table>
	</form>
</body>
</html>
```

```
//16.4.php
**获取信息进行发送邮件**
<?php
header("Content-Type: text/html;charset=utf-8");
$from=$_POST['from'];			//获取发件人
$to = $_POST['to'];			//获取收件人列表
$subject = $_POST['subject'];		//获取标题
$msg = $_POST['body'];		//获取内容

$file = $_FILES['upload_file']['tmp_name'];		//获取上传的文件存放的临时路径

$boundary = md5(time());		//分割线
$headers ="Content-Type: multipart/mixed; boundary= $boundary\r\n";			//头信息分割线
$headers .= "From:$from\r\n";

if($_FILES['upload_file']['type']){			//确定上传文件MIME类型
	$mimeType = $_FILES['upload_file']['type'];
}else{
	$mimeType = "application/unknown";
}

$fileName = $_FILES['upload_file']['name'];		//设置文件名

$handle = fopen($fileName, "w+r");		//打开文件测试
$file = fread($handle, filesize($file));	//读入变量
$file = base64_encode($fileName);		//使用base64进行编码
$file = chunk_split($fileName);		//进行字符串分隔
fclose($handle);			//关闭文件

//设置内容
$body = "--$boundary        
Content-Type: text/plain; charset=utf-8
Content-transfer-encoding: 8bit
$msg
--$boundary
Content-type: $mimeType; name=$fileName
Content-disposition:attachment; filename=$fileName
Content-transfer-encoding: base64
$file
--$boundary--";

$sendmail = mail($to, $subject, $msg, $headers);		//发送邮件

if($sendmail){
	echo "sent succ.";
}else{
	echo "sent fail.";
}
?>
```

```
### 实例
**邮件发送类模板**

<?php
header("Content-Type: text/html;charset=utf-8");
$smtpserver = "smtp.126.com";
$smtpserverport = 25;
$smtpuermail = "xuzonghao@126.com";
$smtpemailto = "zonghao1@staff.sina.com.cn";
$smtpuser = "";
$smtppass = "";
$mailsubject = "测试邮件";
$mailbody = "<h1> 这是测试邮件</h1>";
$mailtype = "HTML";
$smtp = new smtp($smtpserver,$smtpserverport,true,$smtpuser,$smtppass);
$smtp->debug = FALSE;
$smtp->sendmail($smtpemailto,$smtpusermail,$mailsubject,$mailbody,$mailtype);

class smtp{
	public $smtp_port;
	public $time_out;
	public $host_name;
	public $log_file;
	public $relay_host;
	public $debug;
	public $auth;
	public $user;
	public $pass;

	private $sock;

	function __construct($relay_host = "", $smtp_port = 25, $auth = false, $user, $pass){
		$this->debug =FALSE;
		$this->smtp_port = $smtp_port;
		$this->relay_host = $relay_host;
		$this->time_out = 30;

		$this->auth = $auth;
		$this->user = $user;
		$this->pass = $pass;

		$this->host_name = "localhost";
		$this->log_file = "";
		$this->sock = FALSE;
	}

	function sendmail($to, $from, $subject = "", $body = "", $mailtype, $cc = "", $bcc = "", $additional_headers = ""){
		$mail_from = $this->get_address($this->strip_comment($from));
		$body =ereg_replace("(^|(\r\n))(\\.)", "\\1.\\3", $body);
		$header .= "MIME-Version:1.0\r\n";
		if($mailtype=="HTML"){
			$header .= "Content-Type:text/html\r\n";
		}
		$header .= "To: ".$to."\r\n";
		if($cc !== ""){
			$header .= "Cc: ".$cc."\r\n";
		}

		$header .= "From: $from<" . $from . ">\r\n";
		$header .= "Subject: " . $subject . "\r\n";
		$header .= $additional_headers;
		$header .= "Date: " . date("r") . "\r\n";
		$header .= "X-Mailer:By Redhat (PHP/".phpversion().")\r\n";
		list($msec, $sec) = explode(" ", microtime());
		$header .= "Message-ID: <".date("YmdHis", $sec)." . ".($msec*10000000).".".$mail_from.">\r\n";

		$TO = explode(",", $this->strip_comment($to));
		if($cc != ""){
			$TO = array_merge($TO, explode(",", $this->strip_comment($cc)));
		}
		if($bcc != ""){
			$TO = array_merge($TO, explode(",", $this->strip_comment($bcc)));
		}

		$sent = TRUE;
		foreach ($TO as $rcpt_to) {
			$rcpt_to = $this->get_address($rcpt_to);
			if(!$this->smtp_sockopen($rcpt_to)){
				$this->log_write("Error: Cannot send email to " . $rcpt_to . "\a");
				$sent = FALSE;
				continue;
			}

			if($this->smtp_send($this->host_name, $mail_from, $rcpt_to, $header, $body)){
				$this->log_write("E-mail has been sent to <".$rcpt_to.">\a");
			}else{
				$this->log_write("Error: Cannot send email to <".$rcpt_to.">\a");
				$sent = FALSE;
			}
			fclose($this->sock);
			$this->log_write("Disconnected from remote host \a");
		}
		echo "<br>";
		echo $header;
		return $sent;
	}

	function smtp_send($helo, $from, $to, $header, $body = ""){
		if{!$this->smtp_putcmd("HELO", $helo)}{
			return $this->smtp_error("sending HELO command");
		}
		if($this->auth){
			if(!$this->smtp_putcmd("AUTH LOGIN", base64_encode($this->user))){
				return $this->smtp_error("sending HELO command");
			}
			if(!$this->smtp_putcmd("", base64_encode($this->pass))){
				return $this->smtp_error("sending HELO command");
			}
		}
		if(!$this->smtp_putcmd("MAIL", "FORM:<".$from.">")){
			return $this->smtp_error("sending MAIL FROM command");
		}
		if(!$this->smtp_putcmd("RCPT", "TO:<".$to.">")){
			return $this->smtp_error("sending RCPT TO command");
		}
		if(!$this->smtp_putcmd("DATA")){
			return $this->smtp_error("sending DATA command");
		}
		if(!$this->smtp_message($header, $body)){
			return $this->smtp_error("sending message");
		}
		if(!$this->smtp_eom()){
			return $this->smtp_error("sending <CR><LF>.<CR><LF> [EOM]");
		}
		if(!$this->smtp_putcmd("QUIT")){
			return $this->smtp_error("sending QUIT command");
		}
		return TRUE;
	}

	function smtp_sockopen($address){
		if($this->relay_host == ""){
			return $this->smtp_sockopen_mx($address);
		}else{
			return $this->smtp_sockopen_relay();
		}
	}

	function smtp_sockopen_relay(){
		$this->log_write("Trying to ".$this->relay_host.":".$this->smtp-port."\n");
		$this->sock = @fsockopen($this->relay_host. $this->smtp_port, $errno, $errstr, $this->time_out);
		if(!($this->sock && $this->smtp_ok())){
			$this->log_write("Error: Cannot connenct to relay host ".$this->relay_host."\n");
			$this->log_write("Error: ".$errstr."(".$errno.")\n");
			return FALSE;
		}
		$this->log_write("Connected to relay host ".$this->relay_host."\n");
		return TRUE;
	}

	function smtp_sockopen_mx($address){
		$domain = ereg_replace("^.+@([^@]+)$", "\\1", $address);
		if(!@getmxrr($domain, $MXHOSTS)){
			$this->log_write("Error: Cannot resolve MX \"".$domain."\"\n");
			return FALSE;
		}
		foreach ($MXHOSTS as $host) {
			$this->log_write("Trying to ". $host.":".$this->smtp_port."\n");
			$this->sock = @fsockopen($host, $this->smtp_port, $errno, $errstr, $this->time_out);
			if(!($this->sock && $this->smtp_ok())){
				$this->log_write("Warning: Cannot connect to mx host ".$host."\n");
				$this->log_write("Error: ".$errstr."(".$errno.")\n");
				continue;
			}
			$this->log_write("Cannected to mx host ".$host."\n");
			return TRUE;
		}
		$this->log_write("Error: Cannot connect to any mx hosts (".implode(", ",$MXHOSTS).")\n");
		return FALSE;
	}
}
?>
```


# 第四篇  数据库篇

## mysql的安装与配置

```
**安装mysql**
yum install -y gcc gcc-c++ autoconf automake zlib-devel libxml2-devel ncurses-devel libmcrypt* libtool* cmake
tar -zxvf mysql-5.1.57.tar.gz;cd mysql-5.1.57
./configure --prefix=/usr/local/mysql --with-extra-charsets=all --with-plugins=all
make;make install

**创建mysql用户并设置不允许登录**
/usr/sbin/useradd mysql -M -s /sbin/nologin && cat /etc/passwd |grep mysql

**初始化数据库**
mkdir /usr/local/mysql/var &&  /root/mysql-5.1.57/scripts/mysql_install_db --datadir=/usr/local/mysql/var

**配置目录权限**
chown -R mysql:mysql /usr/local/mysql

**将mysql数据库启动脚本添加至开机自启动**
echo "/usr/local/mysql/bin/mysqld_safe &" >> /etc/rc.local

**查看配置文件**
cat  my.cnf |egrep -v '(^#|^$)'|mor

**启动数据库**
/usr/local/mysql/bin/mysqld_safe &

**停止数据库**
mysqladmin shutdown -uroot -p"123qwe"

**设置密码，创建utf-8数据库**
./mysqladmin -uroot password "123qwe" 
mysql> create database mytest character set utf8; 
mysql> show variables like '%storage_engine%';
+----------------+--------+
| Variable_name  | Value  |
+----------------+--------+
| storage_engine | InnoDB | 
+----------------+--------+
1 row in set (0.01 sec)
mysql> flush privileges;
```

### 创建数据库

```
information_schema/mysql/test三个数据库，前两个用于存储mysql用户管理、操作和服务器等信息。test为默认创建的一个测试数据库，默认为空。
```

```
查看数据库
show databases;
```

```
创建数据库
create database dbname;
```

### 删除数据库

```
drop databases dbname;
```

### 选择数据库

```
use dbname;
```

### 备份与恢复

```
**备份**
mysqldump [options] dbname [tablename]		//备份
mysqldump -u root -p  mydb > mydb.sql    //备份一个数据库

mysqldump -u root -p -databases mydb1 mydb2 mydb3 > multibackupfile.sql   //备份多个数据库 
mysqldump -u root -p -all-databases  >　alldb.sql  //备份全部数据库

**恢复**
mysql -uroot -p --default-character-set=utf8 mytest < mytest.sql
source filename   		//恢复备份文件
```

## 操作数据表

### 创建表

|序号|姓名|性别|出生年月|详细地址|邮政编码|电子邮件|
|---|---|---|---|---|---|---|
|1|张三|男|1978-02-18|x省x市x街道|100010|zsan@163.com|
|2|李四|女|1989-10-23|y省y市y街道|239002|lsi@msn.com|
|3|王五|女|1993-12-01|z省z市z街道|532002|wwu@hotmail.com|
|4|赵六|男|1980-09-01|a省a市a街道|510021|zliu@sina.com.cn|

```
**开始创建数据库**
create table tablename
col_name type [NOT NULL | NULL] [DEFAULT default_value]
[AUTO_INCREMENT] | [PRIMARY KEY]
[COMMENT 'string'] 

//tablename 为要创建表的表名
//col_name为数据表的列名，至少有一列
//type为数据表中列的类型
//[NOT NULL | NULL] 表示该列是否允许空
//DEFAULT default_value该列默认值
//[AUTO_INCREMENT]用于指定列值是否自动递增，没插入一条数据，该列自动加1
//[PRIMARY KEY]是否为主键，可使用一列或多列为主键
//COMMENT此列的说明，会把该说明存储在表的定义中
```

```
**创建如表所表示的数据**
**该语句创建一个user表，在该表中，序号是以自动递增方式进行编号的，并且将序号设置为主键，处理序号和用户名不能为空以外，其他所有列均可以为空，并且每列都设置了列的说明**
create table user(
id smallint(6) NOT NULL auto_increment PRIMARY KEY comment '序号',
name varchar(20) NOT NULL comment '用户姓名',
sex char(2) NOT NULL comment '性别',
birthday char(10) NULL comment '出生年月',
address varchar(100) NULL comment '详细地址',
postcode char(6) NULL comment '邮政编码',
email varchar(100) NULL comment '电子邮件'
)COMMENT = '用户信息表';

**查看创建数据表
show create table user;
| user  | CREATE TABLE `user` (
  `id` smallint(6) NOT NULL AUTO_INCREMENT COMMENT '序号',
  `name` varchar(20) NOT NULL COMMENT '用户姓名',
  `sex` char(2) NOT NULL COMMENT '性别',
  `birthday` char(10) DEFAULT NULL COMMENT '出生年月',
  `address` varchar(100) DEFAULT NULL COMMENT '详细地址',
  `postcode` char(6) DEFAULT NULL COMMENT '邮政编码',
  `email` varchar(100) DEFAULT NULL COMMENT '电子邮件',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户信息表'
```

### 修改表

```
alter table tablename
ADD [COLUME] colume_definition [FIRST | AFTER col_name]
| MODIFY [COLUMN] column_definitinon [FIRST | AFTER col_name]
| DROP [COLUME] col_nume
| DROP PRIMARY KEY

//tablename修改表的名称
//ADD添加新列
//COLUMN 要添加列
//colume_definition为列的说明
//FIRST | AFTER col_name互斥的选项，在指定某一列之前或之后添加新的列
//MODIFY修改指定列
//DROP col_nume 删除有colume_name指定的列
//DROP PRIMARY KEY删除主键
```

### 修改数据表结构

```
alter table user
ADD COLUMN country char(20) COMMENT '国家',
ADD COLUMN province char(10) COMMENT '省份',
ADD COLUMN city char(20) COMMENT '城市',
MODIFY COLUMN address varchar(200);
```

### 删除表

```
drop table tablename;
```


## 数据库类型与视图

### mysql数据类型（3种）

```
1、数值类型
--严格数值数据类型
		INTRGER[(length)][UNSIGNED][ZEROFILL]
		SMALLINF[(length)][UNSIGNED][ZEROFILL]
		DECIMAL[(length)][UNSIGNED][ZEROFILL]
		NUMERIC[(length)][UNSIGNED][ZEROFILL]
--近似数据类型
		FLOAT[(length,decimals)][UNSIGNED][ZEROFILL]
		REAL[(length,decimals)][UNSIGNED][ZEROFILL]
		DOUBLE PRECISION[(length,decimals)][UNSIGNED][ZEROFILL]
--SQL扩展整数类型
		TINYINT[(length)][UNSIGNED][ZEROFILL]
		MEDIUMINT[(length)][UNSIGNED][ZEROFILL]
		BIGINT[(length)][UNSIGNED][ZEROFILL]
说明：length表示数值数据类型的长度，UNSIGNED表示该数据是否为无信号型数据，ZEROFILL表示是否以0填充


2、日期和时间类型
--DATE：日期
--DATETIME:日期和时间
--TIMESTAMP：时间戳
--TIME：时间
--YEAR：两位或四位表示的年

3、字符串类型
--CHAR：字符串类型
--VARCHAR：可变字符串类型
--BINARY：二进制字符串类型
--VARBINARY：可变二进制字符串类型
--TINYBLOB：微大对象类型 
--BLOB：大对象类型
--MEDIUMBLOB：微大对象类型
--LONGBLOB：长大对象类型
--TINYTEXT：微文本类型
--TEXT：文件类型
--MEDIUMTEXT：中文本类型
--LONGTEXT：长文本类型
--ENUM：枚举值类型
--SET：集合类型
```

### 视图

```
CREATE [OR REPLACE]
 VIEW view_name [(column_list)]
 AS select_statement
```

```
**创建视图**
mysql> use mytest;
mysql> create view user_v (id, name, sex) as select id,name,sex from user;
mysql> show create view user_v;
```

```
**删除视图**
drop view viewname;
```

```
**插入多条语句**
insert into userinfo
values
{("100012","张三","男","深圳市","a@sohu.com"),
("100013","李四","女","天津市","b@sohu.com"),
("100014","孙八","男","北京市","c@sohu.com")};
```

### 更新语句

```
UPDATE tbl_name
	SET col_name1=expr1 [, col_name2=expr2 ...]
	[WHERE where_definition]
	[ORDER BY ...]
	[LIMIT row_count]
```

```
**更新所有数据，将所有人员工资上调500**
ipdate userinfo
set salary = salary + 500;
```

```
**将所有工资小于2000的上调1000元**
update userinfo
set salary = salary + 1000
where salary < 2000;
```

### 使用工具创建数据库和表结构

```
**Navicat工具**
创建mydb数据库
创建userinfo表
mysql> use mydb;
Database changed
mysql> show tables;
+----------------+
| Tables_in_mydb |
+----------------+
| userinfo       |
+----------------+
1 row in set

mysql> desc userinfo;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| userid   | int(11)     | NO   | PRI | NULL    | auto_increment |
| username | varchar(30) | NO   |     | NULL    |                |
| sex      | char(2)     | NO   |     | NULL    |                |
| address  | varchar(50) | NO   |     | NULL    |                |
| email    | varchar(30) | NO   |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
5 rows in set

```

创建数据表，如下视图：
![navicat创建数据库和表](https://github.com/xuzonghao/xuzonghao.github.io/blob/master/_posts/php/png/navicat.jpg?raw=true "navicat创建数据库和表")

### 插入数据

![navicat表插入数据](https://github.com/xuzonghao/xuzonghao.github.io/blob/master/_posts/php/png/charubiao.jpg?raw=true "navicat表插入数据")


### 数据的查询

```
SELECT * 
FROM `userinfo`
WHERE `userid` = '2';
```
![navicat数据查询](https://github.com/xuzonghao/xuzonghao.github.io/blob/master/_posts/php/png/datachaxun.jpg?raw=true "navicat数据查询")


### 导出数据为txt、word、xml等
![navicat数据导出](https://github.com/xuzonghao/xuzonghao.github.io/blob/master/_posts/php/png/daochu.jpg?raw=true "navicat数据导出")




### complete! by zonghao!